// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String     @id @default(uuid())
  name          String
  images        String[]
  description   String
  type          String
  price         Int
  condition     String
  category      String
  youtubeURL    String?
  location      String
  contactName   String
  contactNumber Int
  priceDealType String[]
  userId        String
  bill          String?
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  views         Int        @default(0)
  Orders        Orders[]
  Messages      Messages[]
}

model Orders {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  userId    String
  createdAt DateTime @default(now())
}

model Messages {
  id              String   @id @default(uuid())
  type            String
  message         String
  recipient       String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  read            String?
  offerPrice      Int?
  optionalProduct Product? @relation(fields: [offerProductId], references: [id])
  createdAt       DateTime @default(now())
  offerProductId  String?
}

model User {
  id       String     @id @default(uuid())
  username String
  email    String     @unique
  photo    String?
  Products Product[]
  Orders   Orders[]
  Messages Messages[]
}
